#List Tuples String mutable immutable 

#Lecture

##supplier=['a','b','c','d','e']
##
##for i in range(len(supplier)):
##    print('Index '+str(i)+ ' in supplier is: '+supplier[i])


##supplier=['pens','pens','pens','pens','pens','pens','pens','pens','pens','pens','pens',
##          'pens','pens','pens','pens']
##
##for i in range(len(supplier)):
##    print('Index '+str(i)+ ' in supplier is: '+supplier[i])

##
##cat=['fat','organge','loud']
##
##size, color,disposition=cat
##
##size, color,disposition='skinny','black','quiet'
##
##a='aaa'
##b='bbb'
##
##a,b=b,a
##
##
##spam=42
##spam=spam+1
##
##spam+=1
##spam



######## Method
##
##spam=['hello','hi','howdy','heyas']
##
##spam.index('hello')
##
##spam=['cat','dog']
##
##spam.append('moose')
##
##spam
##
##spam=['cat','dog']
##
##spam.insert(1,'chicken')
##
##spam


# insert and append method return 'none' value.
# insert and append are list method
# they cannot be called by strings

##
##spam=['cat','bat','rat']
##spam.remove('bat')
##
##del spam[0]
##spam
##
##
##spam=['cat','bat','cat']
##spam.remove('cat')
##spam
##
##
##spam=[2,3,4,5,-9]
##spam.sort()
##spam
##
##spam=['ants','cats','dogs']
##spam.sort()
##spam
##
##
##spam.sort(reverse=True)
##spam
##
###cannot sort character and numbers
##
##spam=['Allice','Base','bag','cat']
##spam.sort(key=str.lower)

# string are immutable
# list are mutalbe

name = 'Zophie a cat'
newName=name[0:7]+'the'+name[8:12]

# list passes reference
# the different references points the same
# list

def eggs(someParameter):
    someParameter.append('Hello')

spam=[1,2,3]
eggs(spam)
print(spam)


# use module copy's deepcopy to get a new list


import copy

spam=['a','b']
cheese=copy.deepcopy(spam)

cheese

spam

spam=['a',
      'b',
      'c',
      'd']

print('four '+\ #ignore the inditation
      'yeer ago')


##The Tuple Data Type
##
##The tuple data type is almost identical to the list data type,
##except in two ways. First, tuples are typed with parentheses,
##( and ), instead of square brackets, [ and ].
##
##But the main way that tuples are different from lists is that tuples,
##like strings, are immutable. Tuples cannot have their values modified,
##appended, or removed. 




1. What is []?

list 


2. How would you assign the value 'hello' as the third value in a list stored in a variable named spam? (Assume spam contains [2, 4, 6, 8, 10].)

For the following three questions, let’s say spam contains the list ['a', 'b', 'c', 'd'].

spam[2]='hello'

3. What does spam[int(int('3' * 2) // 11)] evaluate to?



4. What does spam[-1] evaluate to?
last item


5. What does spam[:2] evaluate to?
beginning untill not include index 2 

For the following three questions,
let’s say bacon contains the list [3.14, 'cat', 11, 'cat', True].



6. What does bacon.index('cat') evaluate to?

1

7. What does bacon.append(99) make the list value in bacon look like?

[3.14, 'cat', 11, 'cat', True,99]

8. What does bacon.remove('cat') make the list value in bacon look like?

[3.14,  11, 'cat', True]

9. What are the operators for list concatenation and list replication?

The operator for list concatenation is +, while the operator for replication is *.
(This is the same as for strings.)

10. What is the difference between the append() and insert() list methods?

rear, choose the position to add the item

11. What are two ways to remove values from a list?

remove, del

12. Name a few ways that list values are similar to string values.

Both lists and strings can be passed to len(), have indexes and slices, be used in for loops,
be concatenated or replicated, and be used with the in and not in operators.

13. What is the difference between lists and tuples?

tuples (),(,) list [], list mutable, tuples immutable

14. How do you type the tuple value that has just the integer value 42 in it?

(42,)

15. How can you get the tuple form of a list value? How can you get the list form of a tuple value?

tuple([,,,])

16. Variables that “contain” list values don’t actually contain lists directly.
What do they contain instead?

reference

17. What is the difference between copy.copy() and copy.deepcopy()?

copy.copy()
copy.copy(), can be used to make a duplicate copy of a mutable value like a list or dictionary,
not just a copy of a reference.

copy.deepcopy()
If the list you need to copy contains lists, then use the copy.deepcopy() function
instead of copy.copy().
The deepcopy() function will copy these inner lists as well.


